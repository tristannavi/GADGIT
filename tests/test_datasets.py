from enum import Enum
from typing import Any

import pandas as pd
from pandas import DataFrame

from gadgit import GeneInfo


class AttributeCount(Enum):
    ONE, TWO = 1, 2


class Duplicate(Enum):
    ONE, TWO = 1, 2


individuals = [
    [24, 40, 42, 47, 63, 80, 94, 96],
    [24, 40, 42, 47, 63, 80, 94, 96],
    [24, 27, 49, 57, 63, 67, 88, 95],
    [3, 12, 13, 29, 53, 57, 58, 59],
    [3, 7, 16, 21, 34, 35, 75, 77],
    [2, 7, 20, 35, 45, 48, 67, 98],
    [22, 29, 31, 48, 52, 69, 76, 85],
    [14, 19, 31, 36, 53, 76, 94, 98],
    [7, 27, 29, 33, 58, 62, 80, 95],
    [15, 18, 31, 35, 48, 49, 64, 69],
    [24, 27, 49, 57, 63, 67, 88, 95],
]


def make_data_frame() -> DataFrame:
    values = [[0.730967787376657, 0.36636074451399603], [0.24053641567148587, 0.47763691175692136],
              [0.6374174253501083, 0.7039697053426346], [0.5504370051176339, 0.3227677982432213],
              [0.5975452777972018, 0.011654838276547785], [0.3332183994766498, 0.7010389381824046],
              [0.3851891847407185, 0.7453528603915509], [0.984841540199809, 0.6072882485626178],
              [0.8791825178724801, 0.2350817258641661], [0.9412491794821144, 0.38904318355362855],
              [0.27495396603548483, 0.9114683618429857], [0.12889715087377673, 0.16738908858440693],
              [0.14660165764651822, 0.003913530617220884], [0.023238122483889456, 0.26489582745247164],
              [0.5467397571984656, 0.8928169571561851], [0.9644868606768501, 0.2975682649107815],
              [0.10449068625097169, 0.4289044793297375], [0.6251463634655593, 0.6875516381838638],
              [0.4107961954910617, 0.4084964347010259], [0.7763122912749325, 0.3530524994432197],
              [0.990722785714783, 0.6717585674995369], [0.4872328470301428, 0.7404171801693827],
              [0.7462414053223305, 0.8944352245063432], [0.7331520701949938, 0.5799577832686672],
              [0.8172970714093244, 0.5107554799482598], [0.8388903500470183, 0.3119697369337915],
              [0.5266994346048661, 0.5402294041714198], [0.8993350116114935, 0.9731076511749595],
              [0.13393984058689223, 0.6136376025272587], [0.0830623982249149, 0.027169061868886568],
              [0.9785743401478403, 0.689017514541342], [0.7223571191888487, 0.6302892759562045],
              [0.7150310138504744, 0.8178375060850521], [0.14322038530059678, 0.7411183464344743],
              [0.4629578184224229, 0.631430080731879], [0.004485602182885184, 0.3148923485089553],
              [0.07149831487989411, 0.7503516379449476], [0.34842022979166454, 0.19021973625862254],
              [0.3387696535357536, 0.12250132750475151], [0.859356551354648, 0.7132889960353932],
              [0.9715469888517128, 0.9330431321065386], [0.8657458802140383, 0.31110877676339577],
              [0.6125811047098682, 0.5295327756124881], [0.17898798452881726, 0.17897794451820814],
              [0.21757041220968598, 0.11388202463766328], [0.8544871670422907, 0.6839413314680614],
              [0.009673497300974332, 0.3792500319840173], [0.6922930069529333, 0.5924290426242587],
              [0.7713129661706796, 0.9406092652171198], [0.7126874281456893, 0.5341455346895269],
              [0.2112353749298962, 0.21419469447284145], [0.7830924897671794, 0.33372967718458435],
              [0.945333238959629, 0.25053617648864046], [0.014236355103667941, 0.7355403649811287],
              [0.3942035527773311, 0.09114656192592707], [0.8537907753080728, 0.264547384486324],
              [0.7860424508145526, 0.18866825776959184], [0.993471955005814, 0.29776138182005185],
              [0.883104405981479, 0.7584708799551577], [0.17029153024770394, 0.04658802908190873],
              [0.9620689182075386, 0.08606856789830353], [0.7242950335788688, 0.8922236965205332],
              [0.6773541612498745, 0.534638761596543], [0.8043954172246357, 0.08564231896368091],
              [0.44142677367579175, 0.5313525456947269], [0.46208799028599445, 0.07339056097526375],
              [0.8528274665994607, 0.17676904746799038], [0.501834850205735, 0.8834777753721988],
              [0.9919429804102169, 0.3504328270340461], [0.9692699099404161, 0.985905826227015],
              [0.35310607217911816, 0.5758925384383466], [0.047265869196129406, 0.6042474596168478],
              [0.0716236234178006, 0.27310863493266946], [0.02910751272163581, 0.5131868476049705],
              [0.48367019010510015, 0.9447402599490898], [0.9719501209537452, 0.21775045026242468],
              [0.9891171507514055, 0.9098217394832929], [0.7674421030154899, 0.019364114853117287],
              [0.5013973510122299, 0.27420937493282704], [0.2555253108964435, 0.6687934837703366],
              [0.30915818724818767, 0.2878767979158957], [0.8482805002723425, 0.063992386430468],
              [0.052084538173983286, 0.22626210633700294], [0.010175454536229256, 0.1400669939745831],
              [0.35385296970871194, 0.6036507737135993], [0.08673785516572752, 0.7277478060617948],
              [0.8503115152643057, 0.3038640241451339], [0.0036769023557003955, 0.625363038800921],
              [0.3078931676344727, 0.035792771372967325], [0.5316085562487977, 0.4773636348492961],
              [0.9188142018385732, 0.09267023264241692], [0.27721002606871137, 0.7106264668386636],
              [0.8742622102831944, 0.434141935561723], [0.6098815135127635, 0.8193475095058459],
              [0.9086392096967358, 0.6045190667188953], [0.04449062015679506, 0.6722448819053354],
              [0.6467239010388895, 0.4500677802499238], [0.4968037636226561, 0.34456078306876614],
              [0.5067015959528527, 0.26939477859012284], [0.5206888198929495, 0.745147167878201]]
    dict_values: dict[str, list[float]] = {
        "GeneName": [str(x) for x in range(0, 100)],
        "Betweenness": [x[0] for x in values],
        "Other": [x[1] for x in values],
    }

    return pd.DataFrame.from_dict(dict_values, orient="columns")


def get_population(duplicate: bool = False) -> list[list[int] | Any] | None:
    match duplicate:
        case True:
            return individuals[0:10]
        case False:
            return individuals[0:1] + individuals[2:]
    return None


def get_gene_info_one_attribute() -> GeneInfo:
    return GeneInfo(make_data_frame(), ['Betweenness'], fixed_list=["5", "10"], com_size=8, seed=1)


def get_gene_info_two_attributes() -> GeneInfo:
    return GeneInfo(make_data_frame(), ['Betweenness', 'Other'], fixed_list=["5", "10"], com_size=8, seed=1)
